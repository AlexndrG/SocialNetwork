{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialog","avatar","src","alt","to","id","activeClassName","active","name","Message","message","my","messageRight","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","cols","rows","validate","required","mapStateToProps","state","isAuth","auth","DialogsContainer","compose","connect","dialogsPage","sendMessage","Component","restProps","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogItems","values","newMessageBody"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,aAAe,gC,qGCS5OC,EAAa,SAACC,GACvB,OACI,sBAAKC,UAAWC,IAAEC,OAAlB,UACI,qBAAKF,UAAWC,IAAEE,OAAQC,IAAKL,EAAMI,OAAQE,IAAK,WAClD,cAAC,IAAD,CAASC,GAAI,YAAcP,EAAMQ,GAAIC,gBAAiBP,IAAEQ,OAAxD,SAAiEV,EAAMW,WCNtEC,EAAU,SAACZ,GACpB,OAEI,aADA,CACA,OAAKC,UAAWC,IAAEW,QAAU,MAAQb,EAAMc,IAAMZ,IAAEa,cAAlD,SAAkEf,EAAMa,W,iCCF1EG,EAAcC,YAAiB,IAwB/BC,EAAsBC,YAAkC,CAACC,KAAM,wBAAzCD,EAlBgD,SAACnB,GACzE,OACI,uBAAMqB,SAAUrB,EAAMsB,aAAtB,UACI,8BAGI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUd,KAAM,iBAAkBe,YAAa,wBAC1DC,KAAM,GAAIC,KAAM,EAChBC,SAAU,CAACC,IAAUd,OAGhC,8BACI,kD,oCClBVe,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,S,YCuCrBE,EAAmBC,YAErBC,aA/BoB,SAACL,GACrB,MAAO,CACHM,YAAaN,EAAMM,eA6BE,CAACC,mBDrCvB,SAA6BC,GAYhC,OAFmCH,YAAQN,EAARM,EARnC,SAA2BrC,GACvB,IAAOiC,EAAwBjC,EAAxBiC,OAAWQ,EAAlB,YAA+BzC,EAA/B,GAEA,OAAKiC,EAEE,cAACO,EAAD,eAAeC,IAFF,cAAC,IAAD,CAAUlC,GAAI,gBC8BjB6B,EFfF,SAACpC,GACpB,IAKMgC,EAAQhC,EAAMsC,YACdI,EAAkBV,EAAMW,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBzC,OAAQyC,EAAEzC,OAAQO,KAAMkC,EAAElC,KAAMH,GAAIqC,EAAErC,IAA5CqC,EAAErC,OAC5DsC,EAAmBd,EAAMe,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBnC,QAASmC,EAAEnC,QAASC,GAAIkC,EAAElC,IAAhCkC,EAAExC,OAEjE,OACI,sBAAKP,UAAWC,IAAEyC,QAAlB,UACI,qBAAK1C,UAAWC,IAAE+C,YAAlB,SACKP,IAGL,sBAAKzC,UAAWC,IAAE6C,SAAlB,UACKD,EAED,cAAC5B,EAAD,CAAqBG,SAlBd,SAAC6B,GAEhBlD,EAAMuC,YAAYW,EAAOC,4BEkBlBhB","file":"static/js/4.0e29c2fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__miH9N\",\"dialogItems\":\"Dialogs_dialogItems__28vVj\",\"active\":\"Dialogs_active__2YcKN\",\"avatar\":\"Dialogs_avatar__18HDC\",\"messages\":\"Dialogs_messages__2ZOK2\",\"message\":\"Dialogs_message__1P9_g\",\"messageRight\":\"Dialogs_messageRight__RSRtB\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemPropsType = {\r\n    avatar: string\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img className={s.avatar} src={props.avatar} alt={'avatar'}/>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    my: boolean\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        // <div className={s.message + ' ' + (!props.my && s.messageRight)}><pre>{props.message}</pre></div>\r\n        <div className={s.message + ' ' + (!props.my && s.messageRight)}>{props.message}</div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validator';\r\nimport {Textarea} from '../common/FormsControl/FormsControl';\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\ntype AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {/*<textarea placeholder={'Enter your message'} cols={50} rows={7}/>*/}\r\n                {/*<Field component={'textarea'} name={'newMessageBody'} placeholder={'Enter your message...'}*/}\r\n                <Field component={Textarea} name={'newMessageBody'} placeholder={'Enter your message...'}\r\n                       cols={50} rows={7}\r\n                       validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const addMessage = (values: AddMessageFormDataType) => {\r\n        // console.log(values)\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    const state = props.dialogsPage\r\n    const dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} avatar={d.avatar} name={d.name} id={d.id}/>)\r\n    const messagesElements = state.messages.map(m => <Message key={m.id} message={m.message} my={m.my}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n\r\n                <AddMessageFormRedux onSubmit={addMessage}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n/*\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const state = props.dialogsPage\r\n    const dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} avatar={d.avatar} name={d.name} id={d.id}/>)\r\n    const messagesElements = state.messages.map(m => <Message key={m.id} message={m.message} my={m.my}/>)\r\n    const newMessageBody = state.newMessageBody\r\n\r\n    const newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n    const onSendMessageClick = () => {\r\n        props.sendMessage()\r\n        newMessageElement.current?.focus()\r\n    }\r\n\r\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const body = e.currentTarget.value\r\n        props.updateNewMessageBody(body)\r\n    }\r\n\r\n    // if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n           </div>\r\n\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <div>\r\n                    <textarea\r\n                        placeholder={'Enter your message'}\r\n                        ref={newMessageElement}\r\n                        cols={50} rows={7}\r\n                        value={newMessageBody}\r\n                        onChange={onNewMessageChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={onSendMessageClick}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n*/","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    function RedirectComponent(props: MapStateToPropsType) {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import {connect} from 'react-redux';\r\nimport {DialogsStateType, sendMessage} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {ComponentType} from 'react';\r\n\r\n\r\ntype DialogsMapStateToPropsType = {\r\n    dialogsPage: DialogsStateType\r\n}\r\n\r\ntype DialogsMapDispatchToProps = {\r\n    sendMessage: (body: string) => void\r\n    // updateNewMessageBody: (body: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = DialogsMapStateToPropsType & DialogsMapDispatchToProps\r\n\r\n\r\nconst mapStateToProps = (state: StateType): DialogsMapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n// const mapDispatchToProps = (dispatch: DispatchType):DialogsMapDispatchToProps => {\r\n//     return {\r\n//         sendMessage: () => {\r\n//             dispatch(sendMessageCreator())\r\n//         },\r\n//         updateNewMessageBody: (body: string) => {\r\n//             dispatch(updateNewMessageBodyCreator(body))\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export const DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs)\r\n\r\n\r\n/*\r\nexport const DialogsContainer = withAuthRedirect(\r\n    connect(mapStateToProps,\r\n        {\r\n            sendMessage,\r\n            updateNewMessageBody\r\n        })(Dialogs)\r\n)\r\n*/\r\n\r\nconst DialogsContainer = compose<ComponentType>(\r\n    // connect(mapStateToProps, {sendMessage, updateNewMessageBody}),\r\n    connect(mapStateToProps, {sendMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer"],"sourceRoot":""}