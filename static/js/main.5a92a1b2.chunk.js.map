{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css","reportWebVitals.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","App.tsx","redux/state.ts","index.tsx","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","className","s","header","src","alt","Navbar","props","friendsElements","state","sidebar","friends","map","f","friend","dialogsPage","dialogs","find","d","id","avatar","name","nav","item","to","activeClassName","activeLink","title","Post","message","like","likesCount","MyPosts","postsElements","posts","p","newPostElement","React","createRef","postsBlock","ref","cols","rows","value","newPostText","onChange","current","dispatch","type","newText","onClick","focus","ProfileInfo","topImg","descriptionBlock","Profile","profilePage","DialogItem","dialog","active","Message","my","messageRight","Dialogs","dialogsElements","messagesElements","messages","m","newMessageElement","dialogItems","newMessageText","action","News","Music","Settings","App","path","render","store","_state","_callSubscriber","console","log","subscribe","observer","this","getState","newPost","unshift","newMessage","push","window","rendererEntireTree","ReactDOM","StrictMode","bind","document","getElementById"],"mappings":"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","file":"static/js/main.5a92a1b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2cl22\",\"posts\":\"MyPosts_posts__3bwbq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__NI9t6\",\"like\":\"Post_like__3HYKo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topImg\":\"ProfileInfo_topImg__2EEfs\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__38b-O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2tkSJ\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            {/*<img src=\"http://www.logobook.com/wp-content/uploads/2016/10/birds.svg\"/>*/}\r\n            <img src=\"http://vectorlogofree.com/wp-content/uploads/2014/09/53354-bird-handmade-logo-icon-vector-icon-vector-eps.png\" alt={'logo'}/>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {StateType} from '../../redux/state';\r\n\r\ntype PropsType = {\r\n    state: StateType\r\n}\r\n\r\nexport const Navbar = (props: PropsType) => {\r\n    const friendsElements = props.state.sidebar.friends.map(\r\n        f => {\r\n            let friend = props.state.dialogsPage.dialogs.find(d => d.id === f)\r\n            if (!friend) {\r\n                friend = props.state.dialogsPage.dialogs[0]\r\n            }\r\n            return (\r\n                <div className={s.avatar}>\r\n                    <img src={friend.avatar}/>\r\n                    <div>{friend.name}</div>\r\n                </div>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n            <div className={s.friends}>\r\n                <div className={s.title}>Friends</div>\r\n\r\n                {friendsElements}\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props:PropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://www.nicepng.com/png/detail/503-5032252_shamim-amiri-blank-female-avatar-icon.png\"/>\r\n            {props.message}\r\n            <div>\r\n                <span className={s.like}>like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from './Posts/Post';\r\nimport {ActionType, PostsDataType} from '../../../redux/state';\r\n\r\ntype PropsType = {\r\n    posts: Array<PostsDataType>\r\n    newPostText: string\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport const MyPosts = (props: PropsType) => {\r\n    const postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    /*\r\n        ссылка на статью про ссылку Ref в TypeScript:\r\n        \"React Refs with TypeScript\"\r\n        https://medium.com/@martin_hotell/react-refs-with-typescript-a32d56c4d315\r\n    */\r\n\r\n    const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    const addPost = () => {\r\n        // props.addPost()\r\n        props.dispatch({type: 'ADD-POST'})\r\n        // props.updateNewPostText('')\r\n        newPostElement.current?.focus()     // это аналогично: newPostElement.current && newPostElement.current.focus()\r\n    }\r\n\r\n    const onPostChange = () => {\r\n        if (newPostElement.current) {\r\n            // props.updateNewPostText(newPostElement.current.value)\r\n            props.dispatch({type: 'UPDATE-NEW-POST-TEXT', newText: newPostElement.current.value})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        ref={newPostElement}\r\n                        cols={35} rows={5}\r\n                        value={props.newPostText}\r\n                        onChange={onPostChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n\r\n                {postsElements}\r\n\r\n                {/*<Post message={posts[0].message} likesCount={posts[0].likesCount}/>*/}\r\n                {/*<Post message={posts[1].message} likesCount={posts[1].likesCount}/>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nexport const ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div className={s.topImg}>\r\n                {/*<img src=\"https://lh3.googleusercontent.com/proxy/Dha2y0hknTXPBojcVYklYv5cWqSQrFZYpMuGuhKuyTIZXJZT_ScltaxDb0bAEAhVRSH6o5FngHBopLK7PkMo0v8ae_WS2r8yNwYfkg_4hdOI-lHrlZOQDQ\"/>*/}\r\n                <img src=\"https://wallpaperaccess.com/full/1760835.jpg\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {MyPosts} from './MyPosts/MyPosts';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {ActionType, PostsDataType} from '../../redux/state';\r\n\r\ntype PropsType = {\r\n    profilePage: {\r\n        posts: Array<PostsDataType>\r\n        newPostText: string\r\n    }\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport const Profile = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPosts\r\n                posts={props.profilePage.posts}\r\n                newPostText={props.profilePage.newPostText}\r\n                dispatch={props.dispatch}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemPropsType = {\r\n    avatar: string\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img className={s.avatar} src={props.avatar}/>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    my: boolean\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message + ' ' + (!props.my && s.messageRight)}>{props.message}</div>\r\n    )\r\n}","import React from 'react';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport {Message} from './Message/Message';\r\nimport {ActionType, DialogsDataType, MessagesDataType} from '../../redux/state';\r\n\r\ntype PropsType = {\r\n    dialogsPage: {\r\n        dialogs: Array<DialogsDataType>\r\n        messages: Array<MessagesDataType>\r\n        newMessageText: string\r\n    }\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport const Dialogs = (props: PropsType) => {\r\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem avatar={d.avatar} name={d.name} id={d.id}/>)\r\n    const messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} my={m.my}/>)\r\n\r\n    const newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n    const addMessage = () => {\r\n        //props.addMessage()\r\n        props.dispatch({type: 'ADD-MESSAGE'})\r\n        newMessageElement.current?.focus()\r\n    }\r\n\r\n    const onMessageChange = () => {\r\n        if (newMessageElement.current) {\r\n            // props.updateNewMessageText(newMessageElement.current.value)\r\n            const action: ActionType = {type: 'UPDATE-NEW-MESSAGE-TEXT', newText: newMessageElement.current.value}\r\n            props.dispatch(action)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n\r\n                {dialogsElements}\r\n\r\n                {/*<DialogItem name={dialogs[0].name} id={dialogs[0].id}/>*/}\r\n                {/*<DialogItem name={dialogs[1].name} id={dialogs[1].id}/>*/}\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                {messagesElements}\r\n\r\n                <div>\r\n                    <textarea\r\n                        ref={newMessageElement}\r\n                        cols={50} rows={7}\r\n                        value={props.dialogsPage.newMessageText}\r\n                        onChange={onMessageChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addMessage}>Add message</button>\r\n                </div>\r\n\r\n                {/*<Message message={messages[0].message}/>*/}\r\n                {/*<Message message={messages[1].message}/>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>\r\n            <b>News</b>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <div>\r\n            <b>Music</b>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            <b>Settings</b>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Header} from './components/Header/Header';\nimport {Navbar} from './components/Navbar/Navbar';\nimport {Profile} from './components/Profile/Profile';\nimport {Dialogs} from './components/Dialogs/Dialogs';\nimport {News} from './components/News/News';\nimport {Music} from './components/Music/Music';\nimport {Settings} from './components/Settings/Settings';\nimport {Route} from 'react-router-dom';\nimport {ActionType, StateType} from './redux/state';\n\ntype PropsType = {\n    state: StateType\n    dispatch: (action: ActionType) => void\n}\n\nexport const App = (props: PropsType) => {\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Navbar state={props.state}/>\n            <div className='app-wrapper-content'>\n\n                <Route path='/dialogs' render={() => <Dialogs\n                    dialogsPage={props.state.dialogsPage}\n                    dispatch={props.dispatch}/>\n                }/>\n\n                <Route path='/profile' render={() => <Profile\n                        profilePage={props.state.profilePage}\n                        dispatch={props.dispatch}/>\n                    }/>\n                <Route path='/news' render={() => <News/>}/>\n                <Route path='/music' render={() => <Music/>}/>\n                <Route path='/settings' render={() => <Settings/>}/>\n            </div>\n        </div>\n    );\n}","export type DialogsDataType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport type MessagesDataType = {\r\n    id: number\r\n    message: string\r\n    my: boolean\r\n}\r\n\r\nexport type PostsDataType = {\r\n    message: string\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nexport type StateType = {\r\n    dialogsPage: {\r\n        dialogs: Array<DialogsDataType>\r\n        messages: Array<MessagesDataType>\r\n        newMessageText: string\r\n    }\r\n\r\n    profilePage: {\r\n        posts: Array<PostsDataType>\r\n        newPostText: string\r\n    }\r\n\r\n    sidebar: {\r\n        friends: Array<number>\r\n    }\r\n}\r\n\r\n\r\ntype ActionTypeAddPost = {\r\n    type: 'ADD-POST'\r\n}\r\ntype ActionTypeUpdateNewPostText = {\r\n    type: 'UPDATE-NEW-POST-TEXT'\r\n    newText: string\r\n}\r\ntype ActionTypeAddMessage = {\r\n    type: 'ADD-MESSAGE'\r\n}\r\ntype ActionTypeUpdateNewMessageText = {\r\n    type: 'UPDATE-NEW-MESSAGE-TEXT'\r\n    newText: string\r\n}\r\n//=======================================\r\nexport type ActionType =\r\n    ActionTypeAddPost |\r\n    ActionTypeUpdateNewPostText |\r\n    ActionTypeAddMessage |\r\n    ActionTypeUpdateNewMessageText\r\n\r\n\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n\r\n    _callSubscriber: (state: StateType) => void\r\n    subscribe: (observer: (state: StateType) => void) => void\r\n\r\n    getState: () => StateType\r\n\r\n    // addPost: () => void\r\n    // updateNewPostText: (newText: string) => void\r\n    // addMessage: () => void\r\n    // updateNewMessageText: (newText: string) => void\r\n\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\n\r\nexport const store: StoreType = {\r\n    _state: {\r\n        profilePage: {\r\n            posts: [\r\n                {id: 1, message: 'Hi, how are you?', likesCount: 15},\r\n                {id: 2, message: 'It\\'s my first post!', likesCount: 20},\r\n                {id: 3, message: 'Blabla', likesCount: 777},\r\n                {id: 4, message: 'Dada', likesCount: 777},\r\n                {id: 5, message: 'Yo, yo, yo!!!', likesCount: 777}\r\n            ],\r\n            newPostText: 'Hello, world!'\r\n        },\r\n\r\n        dialogsPage: {\r\n            dialogs: [\r\n                {id: 1, name: 'Dimych', avatar: 'https://image.flaticon.com/icons/png/512/147/147144.png'},\r\n                {\r\n                    id: 2,\r\n                    name: 'Andrey',\r\n                    avatar: 'https://3dtoday.ru/upload/users/avatars/sIN8UsnRj2kXjxP6aU6Qth56TKVsssiXdwYnaXNa.png'\r\n                },\r\n                {id: 3, name: 'Sveta', avatar: 'https://image.flaticon.com/icons/png/512/146/146005.png'},\r\n                {\r\n                    id: 4,\r\n                    name: 'Sasha',\r\n                    avatar: 'https://i.pinimg.com/originals/7c/c7/a6/7cc7a630624d20f7797cb4c8e93c09c1.png'\r\n                },\r\n                {id: 5, name: 'Victor', avatar: 'https://image.flaticon.com/icons/png/512/146/146007.png'},\r\n                {\r\n                    id: 6,\r\n                    name: 'Valera',\r\n                    avatar: 'https://cdn.iconscout.com/icon/free/png-256/astonishes-boy-1129046.png'\r\n                }\r\n            ],\r\n\r\n            messages: [\r\n                {id: 1, message: 'Hi', my: true},\r\n                {id: 2, message: 'Hello, world!', my: false},\r\n                {id: 3, message: 'Yo', my: true},\r\n                {id: 4, message: 'Yo', my: false},\r\n                {id: 5, message: 'Yo', my: false}\r\n            ],\r\n            newMessageText: 'New message'\r\n        },\r\n\r\n        sidebar: {\r\n            friends: [2, 4, 3]\r\n        }\r\n    },\r\n\r\n\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    _callSubscriber(state) {\r\n        console.log('State changed!')\r\n    },\r\n\r\n    // subscribe (observer: (state: StateType) => void) {\r\n    subscribe(observer) {\r\n        this._callSubscriber = observer\r\n    },\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n/*\r\n    addPost() {\r\n        const newPost: PostsDataType = {\r\n            id: 5,\r\n            message: this._state.profilePage.newPostText,\r\n            likesCount: 0\r\n        }\r\n\r\n        this._state.profilePage.posts.unshift(newPost)\r\n        this._state.profilePage.newPostText = ''\r\n        this._callSubscriber(this._state)\r\n    },\r\n\r\n    updateNewPostText(newText) {\r\n        this._state.profilePage.newPostText = newText\r\n        this._callSubscriber(this._state)\r\n    },\r\n    //===========================\r\n\r\n    addMessage() {\r\n        const newMessage: MessagesDataType =\r\n            {\r\n                id: 7,\r\n                message: this._state.dialogsPage.newMessageText,\r\n                my: true\r\n            }\r\n\r\n        this._state.dialogsPage.messages.push(newMessage)\r\n        this._state.dialogsPage.newMessageText = ''\r\n        this._callSubscriber(this._state)\r\n    },\r\n\r\n    updateNewMessageText(newText) {\r\n        this._state.dialogsPage.newMessageText = newText\r\n        this._callSubscriber(this._state)\r\n    },\r\n*/\r\n    //===========================\r\n\r\n    getState() {\r\n        return this._state\r\n    },\r\n    //===========================\r\n\r\n    dispatch(action) { // action -> {type: 'ADD-POST'} или {type: 'UPDATE-NEW-POST-TEXT'} или ...\r\n        if (action.type === 'ADD-POST') {\r\n            const newPost: PostsDataType = {\r\n                id: 5,\r\n                message: this._state.profilePage.newPostText,\r\n                likesCount: 0\r\n            }\r\n            this._state.profilePage.posts.unshift(newPost)\r\n            this._state.profilePage.newPostText = ''\r\n            this._callSubscriber(this._state)\r\n        } else if (action.type === 'UPDATE-NEW-POST-TEXT') {\r\n            this._state.profilePage.newPostText = action.newText\r\n            this._callSubscriber(this._state)\r\n        } else if (action.type === 'ADD-MESSAGE') {\r\n            const newMessage: MessagesDataType =\r\n                {\r\n                    id: 7,\r\n                    message: this._state.dialogsPage.newMessageText,\r\n                    my: true\r\n                }\r\n            this._state.dialogsPage.messages.push(newMessage)\r\n            this._state.dialogsPage.newMessageText = ''\r\n            this._callSubscriber(this._state)\r\n        } else if (action.type === 'UPDATE-NEW-MESSAGE-TEXT') {\r\n            this._state.dialogsPage.newMessageText = action.newText\r\n            this._callSubscriber(this._state)\r\n        }\r\n    },\r\n\r\n}\r\n\r\n\r\n//==============================================================\r\ndeclare global {\r\n    interface Window {\r\n        // add you custom properties and methods\r\n        store: StoreType\r\n    }\r\n}\r\nwindow.store = store\r\n//==============================================================\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/*\r\nexport const state: StateType = {\r\n    profilePage: {\r\n        posts: [\r\n            {id: 1, message: 'Hi, how are you?', likesCount: 15},\r\n            {id: 2, message: 'It\\'s my first post!', likesCount: 20},\r\n            {id: 3, message: 'Blabla', likesCount: 777},\r\n            {id: 4, message: 'Dada', likesCount: 777},\r\n            {id: 5, message: 'Yo, yo, yo!!!', likesCount: 777}\r\n        ],\r\n        newPostText: 'Hello, world!'\r\n    },\r\n\r\n    dialogsPage: {\r\n        dialogs: [\r\n            {id: 1, name: 'Dimych', avatar: 'https://image.flaticon.com/icons/png/512/147/147144.png'},\r\n            {\r\n                id: 2,\r\n                name: 'Andrey',\r\n                avatar: 'https://3dtoday.ru/upload/users/avatars/sIN8UsnRj2kXjxP6aU6Qth56TKVsssiXdwYnaXNa.png'\r\n            },\r\n            {id: 3, name: 'Sveta', avatar: 'https://image.flaticon.com/icons/png/512/146/146005.png'},\r\n            {\r\n                id: 4,\r\n                name: 'Sasha',\r\n                avatar: 'https://i.pinimg.com/originals/7c/c7/a6/7cc7a630624d20f7797cb4c8e93c09c1.png'\r\n            },\r\n            {id: 5, name: 'Victor', avatar: 'https://image.flaticon.com/icons/png/512/146/146007.png'},\r\n            {id: 6, name: 'Valera', avatar: 'https://cdn.iconscout.com/icon/free/png-256/astonishes-boy-1129046.png'}\r\n        ],\r\n\r\n        messages: [\r\n            {id: 1, message: 'Hi', my: true},\r\n            {id: 2, message: 'Hello, world!', my: false},\r\n            {id: 3, message: 'Yo', my: true},\r\n            {id: 4, message: 'Yo', my: false},\r\n            {id: 5, message: 'Yo', my: false}\r\n        ],\r\n        newMessageText: 'New message'\r\n    },\r\n\r\n    sidebar: {\r\n        friends: [2, 4, 3]\r\n    }\r\n}\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nlet rendererEntireTree = (state: StateType) => {\r\n    console.log('Hello, world!')\r\n}\r\n\r\nexport const subscribe = (observer: (state: StateType) => void) => {\r\n    rendererEntireTree = observer\r\n}\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n\r\n\r\n//===========================\r\n\r\nexport const addPost = () => {\r\n    const newPost: PostsDataType = {\r\n        id: 5,\r\n        message: state.profilePage.newPostText,\r\n        likesCount: 0\r\n    }\r\n\r\n    state.profilePage.posts.unshift(newPost)\r\n    state.profilePage.newPostText = ''\r\n    rendererEntireTree(state)\r\n}\r\n\r\nexport const updateNewPostText = (newText: string) => {\r\n    state.profilePage.newPostText = newText\r\n    rendererEntireTree(state)\r\n}\r\n\r\n//===========================\r\n\r\nexport const addMessage = () => {\r\n    const newMessage: MessagesDataType =\r\n        {\r\n            id: 7,\r\n            message: state.dialogsPage.newMessageText,\r\n            my: true\r\n        }\r\n\r\n    state.dialogsPage.messages.push(newMessage)\r\n    state.dialogsPage.newMessageText = ''\r\n    rendererEntireTree(state)\r\n}\r\n\r\nexport const updateNewMessageText = (newText: string) => {\r\n    state.dialogsPage.newMessageText = newText\r\n    rendererEntireTree(state)\r\n}\r\n\r\n*/\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\nimport {App} from './App';\nimport {StateType, store} from './redux/state';\n\n\nconst rendererEntireTree = (state: StateType) => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <HashRouter>\n                <App\n                    state={state}\n                    dispatch={store.dispatch.bind(store)}\n                />\n            </HashRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nrendererEntireTree(store.getState())\n\nstore.subscribe(rendererEntireTree)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__fuf5Q\",\"item\":\"Navbar_item__oT5rA\",\"activeLink\":\"Navbar_activeLink__2RHqf\",\"friends\":\"Navbar_friends__2jLV8\",\"title\":\"Navbar_title__3XAOj\",\"avatar\":\"Navbar_avatar__3YU0Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__miH9N\",\"dialogItems\":\"Dialogs_dialogItems__28vVj\",\"active\":\"Dialogs_active__2YcKN\",\"avatar\":\"Dialogs_avatar__18HDC\",\"messages\":\"Dialogs_messages__2ZOK2\",\"message\":\"Dialogs_message__1P9_g\",\"messageRight\":\"Dialogs_messageRight__RSRtB\"};"],"sourceRoot":""}