{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","event","currentTarget","ProfileInfo","isOwner","profile","savePhoto","className","s","topImg","src","alt","photos","descriptionBlock","avatarImage","large","type","e","files","fullName","userId","aboutMe","style","paddingLeft","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","Preloader","Post","item","message","like","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","cols","rows","validate","required","MyPosts","React","memo","console","log","postsElements","posts","map","p","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","this","match","params","authorizedUserId","history","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","isAuth","auth","withRouter"],"mappings":"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","file":"static/js/3.369dbc66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"topImg\":\"ProfileInfo_topImg__2EEfs\",\"avatarImage\":\"ProfileInfo_avatarImage__ar738\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__38b-O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2cl22\",\"posts\":\"MyPosts_posts__3bwbq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__NI9t6\",\"like\":\"Post_like__3HYKo\"};","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype ProfileStatusStateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>('')\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const statusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b><i>{`Status: `}</i></b>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '---no status---'}</span>\r\n                {/*<span onDoubleClick={this.activateEditMode.bind(this)}>{this.props.status}</span>*/}\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input value={status} autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       onChange={event => statusChange(event)}/>\r\n            </div>\r\n            }\r\n            <p/>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileDataType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileDataType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (image: File) => void\r\n}\r\n\r\nexport const ProfileInfo = ({isOwner, profile, status, updateStatus, savePhoto}: ProfileInfoPropsType) => {\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files && e.currentTarget.files[0]) {\r\n            savePhoto(e.currentTarget.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {/*<img src=\"https://lh3.googleusercontent.com/proxy/Dha2y0hknTXPBojcVYklYv5cWqSQrFZYpMuGuhKuyTIZXJZT_ScltaxDb0bAEAhVRSH6o5FngHBopLK7PkMo0v8ae_WS2r8yNwYfkg_4hdOI-lHrlZOQDQ\"/>*/}\r\n                <img\r\n                    className={s.topImg}\r\n                    src=\"https://wallpaperaccess.com/full/1760835.jpg\"\r\n                    alt={'background'}\r\n                />\r\n            </div>\r\n\r\n            {\r\n                profile.photos\r\n                    ?\r\n                    <div className={s.descriptionBlock}>\r\n                        <img\r\n                            className={s.avatarImage}\r\n                            src={profile.photos.large}\r\n                            alt={'Avatar'}\r\n                        />\r\n                        <br/>\r\n                        {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                        <p/>\r\n\r\n                        {/*<ProfileStatus*/}\r\n                        <ProfileStatusWithHooks\r\n                            status={status}\r\n                            updateStatus={updateStatus}/>\r\n\r\n                        <div><b>Full name: </b>{profile.fullName}</div>\r\n                        <div><b>User Id: </b>{profile.userId}</div>\r\n\r\n                        <div><b>About me: </b>{profile.aboutMe}</div>\r\n                        <b>Contacts:</b>\r\n                        <div style={{paddingLeft: '30px'}}>\r\n                            <b><i>facebook: </i></b> {profile.contacts.facebook ? profile.contacts.facebook : ''}\r\n                            <br/><b><i>website: </i></b> {profile.contacts.website ? profile.contacts.website : ''}\r\n                            <br/><b><i>vk:</i></b> {profile.contacts.vk ? profile.contacts.vk : ''}\r\n                            <br/><b><i>twitter:</i></b> {profile.contacts.twitter ? profile.contacts.twitter : ''}\r\n                            <br/><b><i>instagram:</i></b> {profile.contacts.instagram ? profile.contacts.instagram : ''}\r\n                            <br/><b><i>youtube:</i></b> {profile.contacts.youtube ? profile.contacts.youtube : ''}\r\n                            <br/><b><i>github:</i></b> {profile.contacts.github ? profile.contacts.github : ''}\r\n                            <br/><b><i>mainLink:</i></b> {profile.contacts.mainLink ? profile.contacts.mainLink : ''}\r\n                        </div>\r\n                        <div><b>{`Looking for a job: `}</b>\r\n                            {profile.lookingForAJob ? profile.lookingForAJobDescription : 'No'}\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                    : <Preloader/>\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props:PropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://www.nicepng.com/png/detail/503-5032252_shamim-amiri-blank-female-avatar-icon.png\" alt={'avatar'}/>\r\n            {props.message}\r\n            <div>\r\n                <span className={s.like}>like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {Post} from './Posts/Post';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validator';\r\nimport {Textarea} from '../../common/FormsControl/FormsControl';\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\ntype MyPostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<MyPostFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {/*<textarea cols={35} rows={5}/>*/}\r\n                {/*<Field component={'textarea'} name={'newPostText'} placeholder={'Enter post text...'}*/}\r\n                <Field component={Textarea} name={'newPostText'} placeholder={'Enter post text...'}\r\n                       cols={35} rows={5}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<MyPostFormDataType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    console.log('Render!')\r\n\r\n    const onAddPost = (values: MyPostFormDataType) => {\r\n        // console.log(formData)\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    const postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n/*\r\n\r\n// export class MyPosts extends React.PureComponent<MyPostsPropsType> {\r\n\r\n\r\nexport class MyPosts extends React.Component<MyPostsPropsType> {\r\n    shouldComponentUpdate(nextProps: Readonly<MyPostsPropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n        return nextProps !== this.props || nextState !== this.state\r\n    }\r\n\r\n    render() {\r\n        console.log('Render!')\r\n        const onAddPost = (values: MyPostFormDataType) => {\r\n            // console.log(formData)\r\n            this.props.addPost(values.newPostText)\r\n        }\r\n\r\n        const postsElements = this.props.posts.map(p => <Post key={p.id} message={p.message}\r\n                                                              likesCount={p.likesCount}/>)\r\n\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3>My posts</h3>\r\n\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n*/\r\n","import {addPost, PostsDataType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../../../redux/redux-store';\r\n\r\n\r\ntype MyPostsMapStateToPropsType = {\r\n    posts: Array<PostsDataType>\r\n    // newPostText: string\r\n}\r\n\r\ntype MyPostsMapDispatchToProps = {\r\n    addPost: (postText: string) => void\r\n    // updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MyPostsMapStateToPropsType & MyPostsMapDispatchToProps\r\n\r\n\r\nconst mapStateToProps = (state: StateType): MyPostsMapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n// const mapDispatchToProps = (dispatch: DispatchType): MyPostsMapDispatchToProps => {\r\n//     return {\r\n//         addPost: () => {\r\n//             dispatch(addPostActionCreator())\r\n//         },\r\n//         updateNewPostText: (text: string) => {\r\n//             dispatch(updateNewPostTextActionCreator(text))\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport const MyPostsContainer = connect(mapStateToProps,\r\n    // {addPost, updateNewPostText})\r\n    {addPost})\r\n(MyPosts)\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileDataType} from '../../redux/profile-reducer';\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileDataType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (image: File) => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType} from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    ProfileDataType,\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto\r\n} from '../../redux/profile-reducer';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\n//==================================================================================================================\r\n\r\n\r\n// class ProfileContainer extends React.Component<ProfileComponentPropsType> {\r\nclass ProfileContainer extends React.Component<WithRouterPropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            // userId = '2'\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<WithRouterPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//==================================================================================================================\r\n//==================================================================================================================\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype WithRouterPropsType = RouteComponentProps<PathParamsType> & ProfileComponentPropsType\r\n\r\n/*\r\nconst WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n*/\r\n\r\n//==================================================================================================================\r\n//==================================================================================================================\r\n\r\n\r\ntype ProfileMapStateToPropsType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    isAuth: boolean\r\n    authorizedUserId: string\r\n\r\n}\r\n\r\ntype ProfileMapDispatchToProps = {\r\n    // setUserProfile: (profile: ProfileDataType) => void\r\n    getUserProfile: (id: string) => void\r\n    getStatus: (id: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (image: File) => void\r\n}\r\n\r\nexport type ProfileComponentPropsType = ProfileMapStateToPropsType & ProfileMapDispatchToProps\r\n\r\n\r\nconst mapStateToProps = (state: StateType): ProfileMapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.id,\r\n})\r\n/*\r\nexport default withAuthRedirect(\r\n    connect(mapStateToProps,\r\n        {\r\n            // setUserProfile\r\n            getUserProfile,\r\n        })(WithUrlDataContainerComponent)\r\n)\r\n*/\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}